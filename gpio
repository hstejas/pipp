#ifndef MY_RASPBERRYPI_GPIO_H
#define MY_RASPBERRYPI_GPIO_H

#include <iostream>
#include <string>
#include <sstream>
#include <fstream>
#include <stdexcept>
#include <exception>


//template<typename >

template<typename T>
std::string toString(const T& in)
{
    std::stringstream ss;
    ss << in;
    return ss.str();
}

class Inception : public std::runtime_error
{
public:
    Inception(const std::string& in="",
              const std::string& line = toString(__LINE__) ,
              const std::string& func=__PRETTY_FUNCTION__ ):std::runtime_error(in + " (" + line + ") " + func) { }
    virtual ~Inception() noexcept {}
};



enum class Direction
{
    IN = 0, OUT
};
enum class Value
{
    OFF = 0, ON = 1
};

namespace
{
const std::string PATH ="/sys/class/gpio";
}

template <int PORT>
class Gpio //: public GpioBase
{
    const static int mPinNo = PORT;
    static Direction mDir;
    static Value mVal;
public:
    Gpio();
    ~Gpio();
    void setDirection(const Direction& dir);
    void set(const Value& in);
    const Value& get();
    void high();
    void isHigh();
    void low();
    void isLow();
    void toggle();

private:
    void init();
};

template<int PORT>
Gpio<PORT>::Gpio()
{
    init();
}

template<int PORT>
Gpio<PORT>::~Gpio()
{
    std::ofstream unexportFile;
    unexportFile.open((PATH+"/unexport").c_str());
    if(unexportFile)
    {
        unexportFile << PORT;
        unexportFile.close();
    }
    else
    {

    }
}

template<int PORT>
void Gpio<PORT>::init()
{
    std::ofstream exportFile;
    exportFile.open((PATH+"/export").c_str());

    if(!exportFile)
        throw Inception("Cannot open Export file!!\n");//throw std::logic_error("Could ")
    exportFile << PORT;
    exportFile.close();
}

template<int PORT>
void Gpio<PORT>::setDirection(const Direction& dir)
{
    std::ofstream dirFile;
    dirFile.open((PATH+"/gpio"+toString(PORT)+"/direction").c_str());

    if(dirFile)
    {
        std::string dirStr = dir == Direction::IN? "in" : "out";
        dirFile << dirStr;
        dirFile.close();
    }
    else {}
}

template<int PORT>
void Gpio<PORT>::set(const Value& val)
{
    std::ofstream valFile;
    valFile.open((PATH+"/gpio"+toString(PORT)+"/value").c_str());

    if(valFile)
    {
        std::string valStr = val == Value::ON? "1" : "0";
        valFile << valStr;
        valFile.close();
    }
    else {}
}

#endif // MY_RASPBERRYPI_GPIO_H
